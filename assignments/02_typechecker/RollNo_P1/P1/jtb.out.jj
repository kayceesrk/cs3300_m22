//
// Generated by JTB 1.3.2
//

options {
   JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(MiniJavaParser)
import syntaxtree.*;
import java.util.Vector;


public class MiniJavaParser 
{
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(MiniJavaParser)

SKIP :
{
   " "
   | "\t"
   | "\n"
   | "\r"
   | "\f"
}

SPECIAL_TOKEN :
{
   <SINGLE_LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")>
   | <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*", "/"] (~["*"])* "*"))* "/">
   | <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*", "/"] (~["*"])* "*"))* "/">
}

TOKEN :
{
   <LPAREN: "(">
   | <RPAREN: ")">
   | <LSQPAREN: "[">
   | <RSQPAREN: "]">
   | <LBRACE: "{">
   | <RBRACE: "}">
   | <SEMICOLON: ";">
   | <DOT: ".">
   | <ASSIGN: "=">
   | <LE: "<=">
   | <NE: "!=">
   | <PLUS: "+">
   | <MINUS: "-">
   | <MULT: "*">
   | <DIV: "/">
   | <AND: "&&">
   | <OR: "||">
   | <NOT: "!">
   | <BOOLEAN: "boolean">
   | <CLASS: "class">
   | <INTERFACE: "interface">
   | <ELSE: "else">
   | <EXTENDS: "extends">
   | <FALSE: "false">
   | <IF: "if">
   | <WHILE: "while">
   | <INTEGER: "int">
   | <LENGTH: "length">
   | <MAIN: "main">
   | <NEW: "new">
   | <PUBLIC: "public">
   | <RETURN: "return">
   | <STATIC: "static">
   | <STRING: "String">
   | <THIS: "this">
   | <TRUE: "true">
   | <PRINT: "System.out.println">
   | <VOID: "void">
   | <DEFINE: "#define">
}

TOKEN :
{
   <INTEGER_LITERAL: (["1"-"9"] (["0"-"9"])* | "0")>
}

TOKEN :
{
   <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
   | <#LETTER: ["$", "A"-"Z", "_", "a"-"z", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u00ff", "\u0100"-"\u1fff", "\u3040"-"\u318f", "\u3300"-"\u337f", "\u3400"-"\u3d2d", "\u4e00"-"\u9fff", "\uf900"-"\ufaff"]>
   | <#DIGIT: ["0"-"9", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef", "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f", "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u1040"-"\u1049"]>
}

Goal Goal() :
{
   MainClass n0;
   NodeListOptional n1 = new NodeListOptional();
   TypeDeclaration n2;
   NodeToken n3;
   Token n4;

   
}
{
   n0=MainClass()
   (
      n2=TypeDeclaration()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   n4=<EOF> { 
      n4.beginColumn++; n4.endColumn++;
      n3 = JTBToolkit.makeNodeToken(n4);
   }
   
   { return new Goal(n0,n1,n3); }
}

MainClass MainClass() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   Identifier n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   PrintStatement n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;

   
}
{
   n1="class" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   n4="{" { n3 = JTBToolkit.makeNodeToken(n4); }
   n6="public" { n5 = JTBToolkit.makeNodeToken(n6); }
   n8="static" { n7 = JTBToolkit.makeNodeToken(n8); }
   n10="void" { n9 = JTBToolkit.makeNodeToken(n10); }
   n12="main" { n11 = JTBToolkit.makeNodeToken(n12); }
   n14="(" { n13 = JTBToolkit.makeNodeToken(n14); }
   n16="String" { n15 = JTBToolkit.makeNodeToken(n16); }
   n18="[" { n17 = JTBToolkit.makeNodeToken(n18); }
   n20="]" { n19 = JTBToolkit.makeNodeToken(n20); }
   n21=Identifier()
   n23=")" { n22 = JTBToolkit.makeNodeToken(n23); }
   n25="{" { n24 = JTBToolkit.makeNodeToken(n25); }
   n26=PrintStatement()
   n28="}" { n27 = JTBToolkit.makeNodeToken(n28); }
   n30="}" { n29 = JTBToolkit.makeNodeToken(n30); }
   
   { return new MainClass(n0,n2,n3,n5,n7,n9,n11,n13,n15,n17,n19,n21,n22,n24,n26,n27,n29); }
}

TypeDeclaration TypeDeclaration() :
{
   NodeChoice n0;
   ClassDeclaration n1;
   ClassExtendsDeclaration n2;

   
}
{
   (
      LOOKAHEAD(3)
      n1=ClassDeclaration()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=ClassExtendsDeclaration()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new TypeDeclaration(n0); }
}

ClassDeclaration ClassDeclaration() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   NodeListOptional n5 = new NodeListOptional();
   VarDeclaration n6;
   NodeListOptional n7 = new NodeListOptional();
   MethodDeclaration n8;
   NodeToken n9;
   Token n10;

   
}
{
   n1="class" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   n4="{" { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      n6=VarDeclaration()
      { n5.addNode(n6); }
   )*
   { n5.nodes.trimToSize(); }
   (
      n8=MethodDeclaration()
      { n7.addNode(n8); }
   )*
   { n7.nodes.trimToSize(); }
   n10="}" { n9 = JTBToolkit.makeNodeToken(n10); }
   
   { return new ClassDeclaration(n0,n2,n3,n5,n7,n9); }
}

ClassExtendsDeclaration ClassExtendsDeclaration() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   Identifier n5;
   NodeToken n6;
   Token n7;
   NodeListOptional n8 = new NodeListOptional();
   VarDeclaration n9;
   NodeListOptional n10 = new NodeListOptional();
   MethodDeclaration n11;
   NodeToken n12;
   Token n13;

   
}
{
   n1="class" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   n4="extends" { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=Identifier()
   n7="{" { n6 = JTBToolkit.makeNodeToken(n7); }
   (
      n9=VarDeclaration()
      { n8.addNode(n9); }
   )*
   { n8.nodes.trimToSize(); }
   (
      n11=MethodDeclaration()
      { n10.addNode(n11); }
   )*
   { n10.nodes.trimToSize(); }
   n13="}" { n12 = JTBToolkit.makeNodeToken(n13); }
   
   { return new ClassExtendsDeclaration(n0,n2,n3,n5,n6,n8,n10,n12); }
}

VarDeclaration VarDeclaration() :
{
   Type n0;
   Identifier n1;
   NodeToken n2;
   Token n3;

   
}
{
   n0=Type()
   n1=Identifier()
   n3=";" { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new VarDeclaration(n0,n1,n2); }
}

MethodDeclaration MethodDeclaration() :
{
   NodeToken n0;
   Token n1;
   Type n2;
   Identifier n3;
   NodeToken n4;
   Token n5;
   NodeOptional n6 = new NodeOptional();
   FormalParameterList n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeListOptional n12 = new NodeListOptional();
   VarDeclaration n13;
   NodeListOptional n14 = new NodeListOptional();
   Statement n15;
   NodeToken n16;
   Token n17;
   Expression n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;

   
}
{
   n1="public" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Type()
   n3=Identifier()
   n5="(" { n4 = JTBToolkit.makeNodeToken(n5); }
   (
      n7=FormalParameterList()
      { n6.addNode(n7); }
   )?
   n9=")" { n8 = JTBToolkit.makeNodeToken(n9); }
   n11="{" { n10 = JTBToolkit.makeNodeToken(n11); }
   (
      LOOKAHEAD(2)
      n13=VarDeclaration()
      { n12.addNode(n13); }
   )*
   { n12.nodes.trimToSize(); }
   (
      n15=Statement()
      { n14.addNode(n15); }
   )*
   { n14.nodes.trimToSize(); }
   n17="return" { n16 = JTBToolkit.makeNodeToken(n17); }
   n18=Expression()
   n20=";" { n19 = JTBToolkit.makeNodeToken(n20); }
   n22="}" { n21 = JTBToolkit.makeNodeToken(n22); }
   
   { return new MethodDeclaration(n0,n2,n3,n4,n6,n8,n10,n12,n14,n16,n18,n19,n21); }
}

FormalParameterList FormalParameterList() :
{
   FormalParameter n0;
   NodeListOptional n1 = new NodeListOptional();
   FormalParameterRest n2;

   
}
{
   n0=FormalParameter()
   (
      n2=FormalParameterRest()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new FormalParameterList(n0,n1); }
}

FormalParameter FormalParameter() :
{
   Type n0;
   Identifier n1;

   
}
{
   n0=Type()
   n1=Identifier()
   
   { return new FormalParameter(n0,n1); }
}

FormalParameterRest FormalParameterRest() :
{
   NodeToken n0;
   Token n1;
   FormalParameter n2;

   
}
{
   n1="," { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=FormalParameter()
   
   { return new FormalParameterRest(n0,n2); }
}

Type Type() :
{
   NodeChoice n0;
   ArrayType n1;
   BooleanType n2;
   IntegerType n3;
   Identifier n4;

   
}
{
   (
      LOOKAHEAD(3)
      n1=ArrayType()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=BooleanType()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=IntegerType()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=Identifier()
      { n0 = new NodeChoice(n4, 3); }
   )
   
   { return new Type(n0); }
}

ArrayType ArrayType() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1="int" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="[" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="]" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new ArrayType(n0,n2,n4); }
}

BooleanType BooleanType() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="boolean" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new BooleanType(n0); }
}

IntegerType IntegerType() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="int" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new IntegerType(n0); }
}

Statement Statement() :
{
   NodeChoice n0;
   Block n1;
   AssignmentStatement n2;
   ArrayAssignmentStatement n3;
   IfStatement n4;
   WhileStatement n5;
   PrintStatement n6;

   
}
{
   (
      n1=Block()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(2)
      n2=AssignmentStatement()
      { n0 = new NodeChoice(n2, 1); }
   |
      LOOKAHEAD(2)
      n3=ArrayAssignmentStatement()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=IfStatement()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=WhileStatement()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=PrintStatement()
      { n0 = new NodeChoice(n6, 5); }
   )
   
   { return new Statement(n0); }
}

Block Block() :
{
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   Statement n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1="{" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=Statement()
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   n5="}" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new Block(n0,n2,n4); }
}

AssignmentStatement AssignmentStatement() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   Expression n3;
   NodeToken n4;
   Token n5;

   
}
{
   n0=Identifier()
   n2="=" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Expression()
   n5=";" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new AssignmentStatement(n0,n1,n3,n4); }
}

ArrayAssignmentStatement ArrayAssignmentStatement() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   Expression n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Expression n8;
   NodeToken n9;
   Token n10;

   
}
{
   n0=Identifier()
   n2="[" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Expression()
   n5="]" { n4 = JTBToolkit.makeNodeToken(n5); }
   n7="=" { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=Expression()
   n10=";" { n9 = JTBToolkit.makeNodeToken(n10); }
   
   { return new ArrayAssignmentStatement(n0,n1,n3,n4,n6,n8,n9); }
}

IfStatement IfStatement() :
{
   NodeChoice n0;
   IfthenElseStatement n1;
   IfthenStatement n2;

   
}
{
   (
      LOOKAHEAD(IfthenElseStatement())
      n1=IfthenElseStatement()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=IfthenStatement()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new IfStatement(n0); }
}

IfthenStatement IfthenStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   Statement n7;

   
}
{
   n1="if" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Statement()
   
   { return new IfthenStatement(n0,n2,n4,n5,n7); }
}

IfthenElseStatement IfthenElseStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   Statement n7;
   NodeToken n8;
   Token n9;
   Statement n10;

   
}
{
   n1="if" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Statement()
   n9="else" { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=Statement()
   
   { return new IfthenElseStatement(n0,n2,n4,n5,n7,n8,n10); }
}

WhileStatement WhileStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   Statement n7;

   
}
{
   n1="while" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Statement()
   
   { return new WhileStatement(n0,n2,n4,n5,n7); }
}

PrintStatement PrintStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1="System.out.println" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=";" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new PrintStatement(n0,n2,n4,n5,n7); }
}

Expression Expression() :
{
   NodeChoice n0;
   OrExpression n1;
   AndExpression n2;
   CompareExpression n3;
   neqExpression n4;
   PlusExpression n5;
   MinusExpression n6;
   TimesExpression n7;
   DivExpression n8;
   ArrayLookup n9;
   ArrayLength n10;
   MessageSend n11;
   PrimaryExpression n12;

   
}
{
   (
      LOOKAHEAD(PrimaryExpression() "||")
      n1=OrExpression()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(PrimaryExpression() "&&")
      n2=AndExpression()
      { n0 = new NodeChoice(n2, 1); }
   |
      LOOKAHEAD(PrimaryExpression() "<=")
      n3=CompareExpression()
      { n0 = new NodeChoice(n3, 2); }
   |
      LOOKAHEAD(PrimaryExpression() "!=")
      n4=neqExpression()
      { n0 = new NodeChoice(n4, 3); }
   |
      LOOKAHEAD(PrimaryExpression() "+")
      n5=PlusExpression()
      { n0 = new NodeChoice(n5, 4); }
   |
      LOOKAHEAD(PrimaryExpression() "-")
      n6=MinusExpression()
      { n0 = new NodeChoice(n6, 5); }
   |
      LOOKAHEAD(PrimaryExpression() "*")
      n7=TimesExpression()
      { n0 = new NodeChoice(n7, 6); }
   |
      LOOKAHEAD(PrimaryExpression() "/")
      n8=DivExpression()
      { n0 = new NodeChoice(n8, 7); }
   |
      LOOKAHEAD(PrimaryExpression() "[")
      n9=ArrayLookup()
      { n0 = new NodeChoice(n9, 8); }
   |
      LOOKAHEAD(PrimaryExpression() "." "length")
      n10=ArrayLength()
      { n0 = new NodeChoice(n10, 9); }
   |
      LOOKAHEAD(PrimaryExpression() "." Identifier() "(")
      n11=MessageSend()
      { n0 = new NodeChoice(n11, 10); }
   |
      n12=PrimaryExpression()
      { n0 = new NodeChoice(n12, 11); }
   )
   
   { return new Expression(n0); }
}

AndExpression AndExpression() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;

   
}
{
   n0=PrimaryExpression()
   n2="&&" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=PrimaryExpression()
   
   { return new AndExpression(n0,n1,n3); }
}

OrExpression OrExpression() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;

   
}
{
   n0=PrimaryExpression()
   n2="||" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=PrimaryExpression()
   
   { return new OrExpression(n0,n1,n3); }
}

CompareExpression CompareExpression() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;

   
}
{
   n0=PrimaryExpression()
   n2="<=" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=PrimaryExpression()
   
   { return new CompareExpression(n0,n1,n3); }
}

neqExpression neqExpression() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;

   
}
{
   n0=PrimaryExpression()
   n2="!=" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=PrimaryExpression()
   
   { return new neqExpression(n0,n1,n3); }
}

PlusExpression PlusExpression() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;

   
}
{
   n0=PrimaryExpression()
   n2="+" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=PrimaryExpression()
   
   { return new PlusExpression(n0,n1,n3); }
}

MinusExpression MinusExpression() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;

   
}
{
   n0=PrimaryExpression()
   n2="-" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=PrimaryExpression()
   
   { return new MinusExpression(n0,n1,n3); }
}

TimesExpression TimesExpression() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;

   
}
{
   n0=PrimaryExpression()
   n2="*" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=PrimaryExpression()
   
   { return new TimesExpression(n0,n1,n3); }
}

DivExpression DivExpression() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;

   
}
{
   n0=PrimaryExpression()
   n2="/" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=PrimaryExpression()
   
   { return new DivExpression(n0,n1,n3); }
}

ArrayLookup ArrayLookup() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;
   NodeToken n4;
   Token n5;

   
}
{
   n0=PrimaryExpression()
   n2="[" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=PrimaryExpression()
   n5="]" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new ArrayLookup(n0,n1,n3,n4); }
}

ArrayLength ArrayLength() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
   n0=PrimaryExpression()
   n2="." { n1 = JTBToolkit.makeNodeToken(n2); }
   n4="length" { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new ArrayLength(n0,n1,n3); }
}

MessageSend MessageSend() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   Identifier n3;
   NodeToken n4;
   Token n5;
   NodeOptional n6 = new NodeOptional();
   ExpressionList n7;
   NodeToken n8;
   Token n9;

   
}
{
   n0=PrimaryExpression()
   n2="." { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Identifier()
   n5="(" { n4 = JTBToolkit.makeNodeToken(n5); }
   (
      n7=ExpressionList()
      { n6.addNode(n7); }
   )?
   n9=")" { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new MessageSend(n0,n1,n3,n4,n6,n8); }
}

ExpressionList ExpressionList() :
{
   Expression n0;
   NodeListOptional n1 = new NodeListOptional();
   ExpressionRest n2;

   
}
{
   n0=Expression()
   (
      n2=ExpressionRest()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ExpressionList(n0,n1); }
}

ExpressionRest ExpressionRest() :
{
   NodeToken n0;
   Token n1;
   Expression n2;

   
}
{
   n1="," { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expression()
   
   { return new ExpressionRest(n0,n2); }
}

PrimaryExpression PrimaryExpression() :
{
   NodeChoice n0;
   IntegerLiteral n1;
   TrueLiteral n2;
   FalseLiteral n3;
   Identifier n4;
   ThisExpression n5;
   ArrayAllocationExpression n6;
   AllocationExpression n7;
   NotExpression n8;
   BracketExpression n9;

   
}
{
   (
      n1=IntegerLiteral()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=TrueLiteral()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=FalseLiteral()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=Identifier()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=ThisExpression()
      { n0 = new NodeChoice(n5, 4); }
   |
      LOOKAHEAD(3)
      n6=ArrayAllocationExpression()
      { n0 = new NodeChoice(n6, 5); }
   |
      n7=AllocationExpression()
      { n0 = new NodeChoice(n7, 6); }
   |
      n8=NotExpression()
      { n0 = new NodeChoice(n8, 7); }
   |
      n9=BracketExpression()
      { n0 = new NodeChoice(n9, 8); }
   )
   
   { return new PrimaryExpression(n0); }
}

IntegerLiteral IntegerLiteral() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<INTEGER_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new IntegerLiteral(n0); }
}

TrueLiteral TrueLiteral() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="true" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new TrueLiteral(n0); }
}

FalseLiteral FalseLiteral() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="false" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new FalseLiteral(n0); }
}

Identifier Identifier() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Identifier(n0); }
}

ThisExpression ThisExpression() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="this" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new ThisExpression(n0); }
}

ArrayAllocationExpression ArrayAllocationExpression() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Expression n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1="new" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="int" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="[" { n4 = JTBToolkit.makeNodeToken(n5); }
   n6=Expression()
   n8="]" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new ArrayAllocationExpression(n0,n2,n4,n6,n7); }
}

AllocationExpression AllocationExpression() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1="new" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   n4="(" { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new AllocationExpression(n0,n2,n3,n5); }
}

NotExpression NotExpression() :
{
   NodeToken n0;
   Token n1;
   Expression n2;

   
}
{
   n1="!" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expression()
   
   { return new NotExpression(n0,n2); }
}

BracketExpression BracketExpression() :
{
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeToken n3;
   Token n4;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expression()
   n4=")" { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new BracketExpression(n0,n2,n3); }
}

IdentifierList IdentifierList() :
{
   Identifier n0;
   NodeListOptional n1 = new NodeListOptional();
   IdentifierRest n2;

   
}
{
   n0=Identifier()
   (
      n2=IdentifierRest()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new IdentifierList(n0,n1); }
}

IdentifierRest IdentifierRest() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;

   
}
{
   n1="," { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   
   { return new IdentifierRest(n0,n2); }
}
